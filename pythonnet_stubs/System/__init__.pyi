from functools import singledispatchmethod
from typing import Callable, Self

class CSharpObject:
	@staticmethod
	def Equals(object1: CSharpObject, object2: CSharpObject) -> bool: ... # type: ignore
	@staticmethod
	def ReferenceEquals(object1: CSharpObject, object2: CSharpObject) ->bool: ...
	def Equals(self, object: Self) -> bool: ...
	# def Finalize() -> None: ...
	def GetHashCode() -> int: ...
	def GetType() -> Type: ...
	def MemberwiseClone() -> Self: ...
	def ToString() -> str: ...

class Type(CSharpObject):
	pass

class Uri(CSharpObject):
	@singledispatchmethod
	def __init__(self, uri: str): ...
	@__init__.register
	def _(self, uri: str, escape: bool): ...

class EventHandler[T, A]:
	def __iadd__(self, handler: Callable[[T, A], None]) -> Self: ...