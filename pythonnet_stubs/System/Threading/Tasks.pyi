"""
https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks
"""

from abc import ABC, ABCMeta, abstractmethod
from enum import Enum
from typing import Final, Union, overload
from System import Action, AggregateException, Object, EventArgs, EventHandler, Exception, Func
from System.Threading import CancellationToken

class TaskCreationOptions(Enum):
	"""
	âš  Special key:<br>
	None = 0<br>
	getattr(TaskCreationOptions, "None")
	"""
	# None = 0
	PreferFairness = 1
	LongRunning = 2
	AttachedToParent = 4
	DenyChildAttach = 8
	HideScheduler = 16
	RunContinuationsAsynchronously = 64

class Task[RT]:
	# incomplete
	@overload
	def __init__(self, method: Union[Action, Func[RT]]):
		pass
	@overload
	def __init__(self, method: Union[Action, Func[RT]], cancellation_token: CancellationToken): ...
	@overload
	def __init__(self, method: Union[Action, Func[RT]], creation_options: TaskCreationOptions): ...
	@overload
	def __init__[AT](self, method: Union[Action[AT], Func[AT, RT]], arg: AT): ...
	@overload
	def __init__(self, method: Union[Action, Func[RT]], cancellation_token: CancellationToken, creation_options: TaskCreationOptions): ...
	@overload
	def __init__[AT](self, method: Union[Action[AT], Func[AT, RT]], arg: AT, cancellation_token: CancellationToken): ...
	@overload
	def __init__[AT](self, method: Union[Action[AT], Func[AT, RT]], arg: AT, creation_options: TaskCreationOptions): ...
	@overload
	def __init__[AT](self, method: Union[Action[AT], Func[AT, RT]], arg: AT, cancellation_token: CancellationToken, creation_options: TaskCreationOptions): ...

	@overload
	def Start(self) -> None: ...
	@overload
	def Start(self, scheduler: TaskScheduler) -> None: ...
	@overload
	def RunSynchronously(self) -> None: ...
	@overload
	def RunSynchronously(self, scheduler: TaskScheduler) -> None: ...

	@classmethod
	def Factory(cls) -> TaskFactory: ...

class TaskFactory(Object):
	# incomplete
	@overload
	def StartNew[AT](self, action: Action[AT], arg: AT, cancellation_token: CancellationToken, creation_options: TaskCreationOptions, scheduler: TaskScheduler) -> Task[None]: ...
	@overload
	def StartNew(self, action: Action, cancellation_token: CancellationToken, creation_options: TaskCreationOptions, scheduler: TaskScheduler) -> Task[None]: ...
	@overload
	def StartNew[AT](self, action: Action[AT], arg: AT, cancellation_token: CancellationToken) -> Task[None]: ...
	@overload
	def StartNew[AT](self, action: Action[AT], arg: AT, creation_options: TaskCreationOptions) -> Task[None]: ...
	@overload
	def StartNew(self, action: Action, cancellation_token: CancellationToken) -> Task[None]: ...
	@overload
	def StartNew(self, action: Action, creation_options: TaskCreationOptions) -> Task[None]: ...
	@overload
	def StartNew(self, action: Action) -> Task[None]: ...
	@overload
	def StartNew[AT](self, action: Action[AT], arg: AT) -> Task[None]: ...
	@overload
	def StartNew[RT](self, function: Func[RT], cancellation_token: CancellationToken, creation_options: TaskCreationOptions, scheduler: TaskScheduler) -> Task[RT]: ...
	@overload
	def StartNew[RT](self, function: Func[RT]) -> Task[RT]: ...
	@overload
	def StartNew[AT, RT](self, function: Func[AT, RT], arg: AT) -> Task[RT]: ...
	@overload
	def StartNew[RT](self, function: Func[RT], cancellation_token: CancellationToken) -> Task[RT]: ...
	@overload
	def StartNew[RT](self, function: Func[RT], creation_options: TaskCreationOptions) -> Task[RT]: ...
	@overload
	def StartNew[AT, RT](self, function: Func[AT, RT], arg: AT, cancellation_token: CancellationToken) -> Task[RT]: ...
	@overload
	def StartNew[AT, RT](self, function: Func[AT, RT], arg: AT, creation_options: TaskCreationOptions) -> Task[RT]: ...
	@overload
	def StartNew[AT, RT](self, function: Func[AT, RT], arg: AT, cancellation_token: CancellationToken, creation_options: TaskCreationOptions, scheduler: TaskScheduler) -> Task[RT]: ...

class UnobservedTaskExceptionEventArgs(EventArgs):
	# incomplete
	def __init__(self):
		self.Exception: Final[AggregateException]

class __TaskScheduler_static(ABCMeta):
	Current: Final[TaskScheduler]
	Default: Final[TaskScheduler]
	UnobservedTaskException: EventHandler[object, UnobservedTaskExceptionEventArgs]
class TaskScheduler(ABC, Object, metaclass=__TaskScheduler_static):
	def __init__(self):
		self.Id: Final[int]
	@property
	@abstractmethod
	def MaximumConcurrencyLevel(self) -> int: ...

	@classmethod
	def FromCurrentSynchronizationContext(cls) -> TaskScheduler: ...

class TaskCompletionSource[RT](Object):
	@overload
	def __init__(self):
		self.Task: Final[Task]
	@overload
	def __init__(self, state: object): ...
	@overload
	def __init__(self, creation_options: TaskCreationOptions): ...
	@overload
	def __init__(self, state: object, creation_options: TaskCreationOptions): ...

	@overload
	def SetCanceled(self) -> None: ...
	@overload
	def SetCanceled(self, cancellation_token: CancellationToken) -> None: ...
	def SetException(self, exception: Exception) -> None: ...
	def SetFromTask(self, completedTask: Task[RT]) -> None: ...
	def SetResult(self, result: RT) -> None: ...
	@overload
	def TrySetCanceled(self) -> None: ...
	@overload
	def TrySetCanceled(self, cancellation_token: CancellationToken) -> bool: ...
	def TrySetException(self, exception: Exception) -> bool: ...
	def TrySetFromTask(self, completedTask: Task[RT]) -> bool: ...
	def TrySetResult(self, result: RT) -> bool: ...
